# ---------------------------------------------------------------------------
# Trivadis AG, Infrastructure Managed Services
# Saegereistrasse 29, 8152 Glattbrugg, Switzerland
# ---------------------------------------------------------------------------
# Name.......: Vagrantfile
# Author.....: Stefan Oehrli (oes) stefan.oehrli@trivadis.com
# Editor.....: Stefan Oehrli
# Date.......: 2019.05.09
# Revision...:  
# Purpose....: Vagrant file to setup and configure ad.trivadislabs.com
# Notes......: 
# Reference..: https://github.com/rgl/windows-domain-controller-vagrant
# License....: Licensed under the Universal Permissive License v 1.0 as 
#              shown at http://oss.oracle.com/licenses/upl.
# ---------------------------------------------------------------------------
# Modified...:
# see git revision history for more information on changes/updates
# ---------------------------------------------------------------------------
require 'yaml'

# install missing vagrant plugin
unless Vagrant.has_plugin?("vagrant-reload")
  puts 'Installing vagrant-reload Plugin...'
  system('vagrant plugin install vagrant-reload')
end

# - Configuration -----------------------------------------------------------
params              = YAML.load_file 'config/vagrant.yml'

# shared configuration
var_default_password= params['common']['default_password']
var_domain_name     = params['common']['domain_name']

# ad box configuration
var_box             = params['ol7docker']['box']
var_box_url         = params['ol7docker']['box_url']
var_vm_name         = params['ol7docker']['vm_name']
var_host_fqdn       = var_vm_name + "." + var_domain_name
var_mem_size        = params['ol7docker']['mem_size']
var_cpus            = params['ol7docker']['cpus']
var_public_ip       = params['ol7docker']['public_ip']
var_ssh_port        = params['ol7docker']['ssh_port']
var_tns_port        = params['ol7docker']['tns_port']
var_console_port    = params['ol7docker']['console_port']

# Convenience function -- Ensure URL has a scheme
def ensure_scheme(url)
  (url =~ /.*:\/\// ? '' : 'http://') + url
end
# - End of Configuration ----------------------------------------------------

Vagrant.configure("2") do |config|
# - Domain controller -------------------------------------------------------
  config.vm.define var_vm_name do |cfg|
    cfg.vm.box      = var_box
    cfg.vm.box_url  = var_box_url
    cfg.vm.define   var_host_fqdn
    cfg.vm.hostname = var_vm_name

    # Share an additional software folder to the guest VM
    cfg.vm.synced_folder "software", "/vagrant_software"
    # Share an additional labs folder to the guest VM
    cfg.vm.synced_folder "../", "/vagrant_labs"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP and define Oracle port forwarding
    cfg.vm.network :forwarded_port, guest: 22,   host: var_ssh_port
    cfg.vm.network :forwarded_port, guest: 1521, host: var_tns_port
    cfg.vm.network :forwarded_port, guest: 5500, host: var_console_port
    cfg.vm.network :private_network, ip: var_public_ip
  
    cfg.vm.box_check_update = false
    # change memory size, cpus etc
    cfg.vm.provider "virtualbox" do |v|
      v.memory    = var_mem_size
      v.cpus      = var_cpus
      v.name      = var_host_fqdn
      
      # file_to_disk = 'box-disk003.vmdk'
      # unless File.exist?(file_to_disk)
      #   # 50 GB
      #   v.customize [ "createmedium", "disk", "--filename", file_to_disk, "--format", "vmdk", "--size", 1024 * 10 ]
      # end
      # v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', file_to_disk]
    
      # Set proxies if vagrant-proxyconf is installed
      if Vagrant.has_plugin?("vagrant-proxyconf")
        ["http_proxy", "HTTP_PROXY"].each do |proxy_var|
          if proxy = ENV[proxy_var]
            puts "HTTP proxy: " + proxy
            config.proxy.http = ensure_scheme(proxy)
            break
          end
        end

        ["https_proxy", "HTTPS_PROXY"].each do |proxy_var|
          if proxy = ENV[proxy_var]
            puts "HTTPS proxy: " + proxy
            config.proxy.https = ensure_scheme(proxy)
            break
          end
        end

        # We should not proxy local IPs (docker bridge, ...)
        # Unfortunately we can't use CIDR with no_proxy, so we have to enumerate and
        # 'blacklist' *all* IPs
        no_proxy = ''
        ["no_proxy", "NO_PROXY"].each do |proxy_var|
          if ENV[proxy_var]
            no_proxy = ENV[proxy_var]
            puts "No proxy: " + no_proxy
            no_proxy += ','
            break
          end
        end
        config.proxy.no_proxy = no_proxy + "localhost,.vagrant.vm," + (".0"..".255").to_a.join(",")
      end    
    end

    # Provision everything on the first run start part 1 of the setup
    cfg.vm.provision "shell", path: "scripts/01_setup_os_db.sh"
    # reload the VM
    cfg.vm.provision :reload

    # provision oudbase
    # Provision everything on the first run start part 1 of the setup
    cfg.vm.provision "shell", path: "scripts/10_configure_oudbase.sh"
    # clone git repositories
    cfg.vm.provision "shell", path: "scripts/11_clone_git_repos.sh"
    # pull base images 
    cfg.vm.provision "shell", path: "scripts/12_pull_base_images.sh"
  end
end
# --- EOF -------------------------------------------------------------------